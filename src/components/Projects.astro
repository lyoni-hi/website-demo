---
import { SOURCE_CODE_URL } from "scripts-ssr/constants";
import ProjectCard from "./ProjectCard.astro";

// You can optionally hardcode the GitHub token here for now (not safe for public repos!)
const GITHUB_TOKEN = import.meta.env.PUBLIC_GITHUB_TOKEN || ""; // Create .env file and add PUBLIC_GITHUB_TOKEN

const repos = [
  "https://api.github.com/repos/Vendicated/Vencord",
  "https://api.github.com/repos/Aliucord/Aliucord",
  "https://api.github.com/repos/Aliucord/hook",
  "https://codeberg.org/api/v1/repos/vee/vendicated.dev",
  "https://api.github.com/repos/Vencord/Installer",
  "https://api.github.com/repos/Vencord/Desktop",
  "https://api.github.com/repos/Vencord/Website",
  "https://api.github.com/repos/Vencord/Companion",
  "https://codeberg.org/api/v1/repos/vee/vlock",
  "https://api.github.com/repos/Vendicated/DiscordWidgets",
  "https://api.github.com/repos/Vendicated/AliucordPlugins",
  "https://api.github.com/repos/Vendicated/WebpackGrabber",
];

const repoData = await Promise.all(
  repos.map(async (repo) => {
    const headers = new Headers({
      "User-Agent": SOURCE_CODE_URL,
    });

    if (repo.includes("api.github.com") && GITHUB_TOKEN) {
      headers.set("Accept", "application/vnd.github.v3+json");
      headers.set("Authorization", `Bearer ${GITHUB_TOKEN}`);
    }

    try {
      const response = await fetch(repo, { headers });
      if (!response.ok) {
        throw new Error(`Failed to fetch ${repo}: ${response.statusText}`);
      }
      return await response.json();
    } catch (e) {
      console.error(e);
      return null;
    }
  })
);
---

<div>
  {repoData.map(data => data ? <ProjectCard {...data} /> : null)}
</div>

<style>
  div {
    --cols: 3;
    display: grid;
    grid-template-columns: repeat(var(--cols), minmax(0, 1fr));
    gap: 0.75em;
  }

  @media screen and (max-width: 1400px) {
    div {
      --cols: 2;
    }
  }

  @media screen and (max-width: 1000px) {
    div {
      --cols: 1;
    }
  }
</style>
