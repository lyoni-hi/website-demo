---
import { SOURCE_CODE_URL } from "scripts-ssr/constants";
import ProjectCard from "./ProjectCard.astro";
import { getEnv } from "scripts-ssr/env";

const repos = [
    "https://api.github.com/repos/Vendicated/Vencord",
    "https://api.github.com/repos/Aliucord/Aliucord",
    "https://api.github.com/repos/Aliucord/hook",
    "https://codeberg.org/api/v1/repos/vee/vendicated.dev",
    "https://api.github.com/repos/Vencord/Installer",
    "https://api.github.com/repos/Vencord/Desktop",
    "https://api.github.com/repos/Vencord/Website",
    "https://api.github.com/repos/Vencord/Companion",
    "https://codeberg.org/api/v1/repos/vee/vlock",
    "https://api.github.com/repos/Vendicated/DiscordWidgets",
    "https://api.github.com/repos/Vendicated/AliucordPlugins",
    "https://api.github.com/repos/Vendicated/WebpackGrabber",
];

const repoData = await Promise.all(
    repos.map(async repo => {
        const requestInit = {
            headers: new Headers({
                "User-Agent": SOURCE_CODE_URL,
            }),
        } satisfies RequestInit;

        if (repo.includes("api.github.com")) {
            const env = import.meta.env;

            const token = getEnv(Astro.locals, env, "GITHUB_TOKEN");

            requestInit.headers.set("Accept", "application/vnd.github.v3+json");
            requestInit.headers.set("Authorization", `Bearer ${token}`);
        }

        return fetch(repo, requestInit)
            .then(async r => {
                if (!r.ok) {
                    const e = await r.text().catch(() => "Unknown Error");
                    throw new Error(
                        `Failed to fetch repo info for ${repo}: ${r.status} ${r.statusText}\n${e}`
                    );
                }
                return r.json();
            })
            .catch(e => {
                console.error(e);
                return null;
            });
    })
);
---

<div>
    {repoData.map(data => (data ? <ProjectCard {...data} /> : null))}
</div>

<style>
    div {
        --cols: 3;
        display: grid;
        grid-template-columns: repeat(var(--cols), minmax(0, 1fr));
        gap: 0.75em;
    }

    @media screen and (max-width: 1400px) {
        div {
            --cols: 2;
        }
    }

    @media screen and (max-width: 1000px) {
        div {
            --cols: 1;
        }
    }
</style>
